kind: secret
name: elasticsearch-config-{{ .Values.cpln.gvc }}
type: opaque
data:
  encoding: plain
  payload: |-
    cluster.name: {{ .Values.elasticsearch.config.clusterName | quote }}
    network.host: {{ .Values.elasticsearch.config.networkHost }}
    node.store.allow_mmap: {{ .Values.elasticsearch.config.nodeStore.allowMmap }}
    xpack.security.enabled: {{ .Values.elasticsearch.config.security.enabled }}
    node.name: node-name-placeholder
    
    # Node roles based on environment variable
    node.roles: ${NODE_ROLES}
    
    # Discovery configuration
    discovery.seed_hosts:
    {{- if .Values.elasticsearch.nodes.master.enabled }}
    {{- range $i := until (.Values.elasticsearch.nodes.master.replicas | int) }}
      - es-master-{{ $i }}.es-master
    {{- end }}
    {{- end }}

---
kind: secret
name: elasticsearch-init-{{ .Values.cpln.gvc }}
type: opaque
data:
  encoding: plain
  payload: |-
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail
    set -x

    error(){
      local message="${1:?missing message}"
      echo "ERROR: ${message}"
      exit 1
    }

    cp /usr/share/elasticsearch/config-custom/elasticsearch.yml /usr/share/elasticsearch/config/elasticsearch.yml

    ELASTIC_CONFIG_FILE=/usr/share/elasticsearch/config/elasticsearch.yml

    replace_placeholder() {
      local placeholder="${1:?missing placeholder value}"
      local value="${2:?missing value}"
      sed -i "s/$placeholder/$value/g" "$ELASTIC_CONFIG_FILE"
    }

    POD_ID=$(echo "$POD_NAME" | rev | cut -d'-' -f 1 | rev)
    WORKLOAD_NAME=$(echo $CPLN_WORKLOAD | sed 's|.*/workload/\([^/]*\)$|\1|')

    replace_placeholder "node-name-placeholder" "${POD_NAME}.${WORKLOAD_NAME}"

    echo "Starting Elasticsearch process in the background..."
    /usr/local/bin/docker-entrypoint.sh &

    ELASTIC_PID=$!

    echo "Waiting for Elasticsearch service to be available..."
    while ! curl -s http://localhost:9200 > /dev/null; do
      echo "Elasticsearch is not yet available. Retrying in 5 seconds..."
      sleep 5
    done

    # Check if this is a master node
    if [[ "$NODE_ROLES" == *"master"* ]]; then
      CLUSTER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9200/_cluster/health || echo "000")

      if [[ "$CLUSTER_STATUS" -ne 200 ]]; then
        echo "Cluster is not initialized. Adding cluster.initial_master_nodes to configuration."

        # Add cluster.initial_master_nodes only if not already present
        if ! grep -q "cluster.initial_master_nodes" "$ELASTIC_CONFIG_FILE"; then
          echo "Adding cluster.initial_master_nodes..."
          cat <<EOF >> "$ELASTIC_CONFIG_FILE"
          
    cluster.initial_master_nodes:
    {{- if .Values.elasticsearch.nodes.master.enabled }}
    {{- range $i := until (.Values.elasticsearch.nodes.master.replicas | int) }}
      - es-master-{{ $i }}.es-master
    {{- end }}
    {{- end }}
    EOF
        else
          echo "cluster.initial_master_nodes already present in configuration. Skipping."
        fi
      else
        echo "Cluster is already initialized. Skipping cluster.initial_master_nodes configuration."
      fi
    else
      echo "This node is not a master node. Skipping cluster.initial_master_nodes configuration."
    fi

    # Stop the initial Elasticsearch process
    echo "Stopping the initial Elasticsearch process..."
    kill $ELASTIC_PID
    wait $ELASTIC_PID 2>/dev/null || true

    echo "Printing elasticsearch.yml"
    cat $ELASTIC_CONFIG_FILE

    # Restart Elasticsearch process to apply configuration changes
    echo "Restarting Elasticsearch process..."
    exec /usr/local/bin/docker-entrypoint.sh
